{"version":3,"sources":["components/Form/Form.js","store/actions/todoAction.js","store/actions/actionTypes.js","components/List/textAndForm.js","components/List/List.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","e","setState","text","target","value","onSubmit","addTodos","state","onClickChoice","choice","styleButtonTodo","_this2","styleButtonNotes","react_default","a","createElement","Fragment","className","concat","onClick","onChange","type","placeholder","Component","connect","dispatch","todo","payload","addTodo","TextAndForm","editButtonHandler","viewMode","saveButtonHandler","editTodo","index","cancelButtonHandler","deleteButtonHandler","deleteTodo","buttonEdit","List","todos","map","key","textAndForm","initialState","store","createStore","arguments","length","undefined","action","objectSpread","toConsumableArray","newTodos","splice","window","__REDUX_DEVTOOLS_EXTENSION__","App","handleSubmit","prevState","es","components_Form_Form","components_List_List","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f69fcfd.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../../store/actions/todoAction'\n\nclass Form extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      text: '',\n      choice: 'Todo'\n    }\n  }  \n\n  onChangeHandler = (e) => {\n    this.setState({ text : e.target.value })\n  }\n\n  onSubmit = () => {\n    this.props.addTodos(this.state.text)\n    this.setState({ text: '' })\n  }\n\n  onClickChoice = (value) => {\n    this.setState({ choice : value })\n  }\n\n  render () {\n    var styleButtonTodo,styleButtonNotes = ''\n    \n    if (this.state.choice === 'Todo') {\n      styleButtonTodo = 'btn-succes'\n    } else {\n      styleButtonNotes = 'btn-succes'\n    }\n\n    return (\n      <>\n        <button \n        className={`btn m2 ${styleButtonTodo}`}\n        onClick={ () => this.onClickChoice('todo')}\n        >\n          Switch to Add Todo\n        </button>\n        <button \n        className={`btn ${styleButtonNotes}`}\n        onClick={ () => this.onClickChoice('notes')}\n        >\n          Switch to Add Notes\n        </button>\n        <p>Add Todo</p>\n        <div className=\"form-group\">\n          <input \n          value={this.state.text}\n          onChange={this.onChangeHandler} type=\"text\" className=\"form-control\" placeholder=\"Type todo here\" />\n        </div>\n        <button \n        onClick={this.onSubmit} \n        className=\"btn btn-primary\"\n        >\n          Add\n        </button>\n      </>\n    )\n  }\n} \n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTodos : ( todo ) =>  dispatch(addTodo(todo))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Form)\n","import * as actionTypes from './actionTypes'\r\n\r\nexport const addTodo = (todo) => ({ \r\n    type: actionTypes.ADD_TODO, \r\n    payload: todo \r\n})\r\n\r\nexport const editTodo = (payload) => ({\r\n    type: actionTypes.EDIT_TODO,\r\n    payload: payload\r\n})\r\n\r\nexport const deleteTodo = (index) => ({\r\n    type: actionTypes.DELETE_TODO,\r\n    payload: index\r\n})","export const ADD_TODO     = 'ADD_TODO'\r\nexport const EDIT_TODO    = 'EDIT_TODO'\r\nexport const DELETE_TODO  = 'DELETE_TODO'","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { editTodo, deleteTodo } from '../../store/actions/todoAction'\r\n\r\n\r\n\r\nclass TextAndForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            viewMode: 'show',\r\n            text: props.todo\r\n        };\r\n    }\r\n\r\n\r\n// fungsi untuk handle ketika user klik tombol edit\r\n    editButtonHandler = () => {\r\n        this.setState({ viewMode: 'edit'})\r\n    }\r\n\r\n        // fungsi untuk handle ketika user klik tombol save\r\n    saveButtonHandler = () => {\r\n        this.props.editTodo(this.props.index, this.state.text)\r\n        this.setState({ viewMode: 'show' })\r\n    }\r\n\r\n    // fungsi untuk handle ketika user klik tombol cancel\r\n    cancelButtonHandler = () => {\r\n    this.setState({ viewMode: 'show'})\r\n    }\r\n\r\n     // fungsi untuk handle ketika user edit text di form\r\n    onChangeHandler = (e) => {\r\n        this.setState({ text: e.target.value })\r\n    }\r\n\r\n    // fungsi untuk handle ketika user klik tombol delete\r\n    deleteButtonHandler = () => {\r\n        this.props.deleteTodo(this.props.index)\r\n    }\r\n\r\n    render() {\r\n    // default tampilan todo berupa text\r\n    var todo = (\r\n    <p>{this.props.todo}</p>\r\n    )\r\n\r\n    // defaut tampilan disamping text todo berupa tombol edit\r\n    var buttonEdit = (\r\n    <button\r\n        className=\"btn btn-primary\"\r\n        onClick={this.editButtonHandler}\r\n    >\r\n        Edit\r\n    </button>\r\n    )\r\n\r\n    // jika viewMode berubah menjadi 'edit',\r\n    if (this.state.viewMode === 'edit') {\r\n    // ganti element text todo menjadi form input\r\n    todo = (\r\n        <input\r\n        className=\"form-control\"\r\n        type=\"text\"\r\n        value={this.state.text}\r\n        onChange={this.onChangeHandler}\r\n        />\r\n    )\r\n\r\n    // ganti tombol ediit menjadi tombol save dan cancel\r\n    buttonEdit = (\r\n        <>\r\n        <button\r\n            className=\"btn btn-success\"\r\n            onClick={this.saveButtonHandler}\r\n        >\r\n            Save\r\n        </button>\r\n        <button\r\n            className=\"btn btn-warning\"\r\n            onClick={this.cancelButtonHandler}\r\n        >\r\n            Cancel\r\n        </button>\r\n        </>\r\n    )\r\n    }\r\n\r\n    return (\r\n    <div className=\"row\">\r\n        <div className=\"col-8\">\r\n        {todo}\r\n        </div>\r\n        <div className=\"col-4\">\r\n        {buttonEdit}\r\n        <button\r\n            className=\"btn btn-danger\"\r\n            onClick={this.deleteButtonHandler}\r\n        >\r\n            Delete\r\n        </button>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        editTodo  : (index, todo) => dispatch( editTodo({ index, todo }) ),\r\n        deleteTodo: (index) => dispatch( deleteTodo(index) )  \r\n        }\r\n    }\r\n\r\n    export default connect(null, mapDispatchToProps)(TextAndForm)\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport TextAndForm from \"./textAndForm\";\n\nclass List extends Component {\n\n  deleteHandler (index) {\n    this.props.deleteTodo(index)\n  }\n\n  render() {\n    return (\n      <div>\n        <ul className=\"list-group\">\n        {this.props.todos.map((todo, index) => (\n          <li key={index} className=\"list-group-item container\">\n\n          <TextAndForm\n            todo={todo}\n            index={index}\n          />\n        \n        </li>\n        ))}\n      </ul>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos\n  };\n};\n\nexport default connect(mapStateToProps, null)(List)\n","import { createStore } from 'redux'\r\nimport * as actionTypes from './actions/actionTypes'\r\n\r\nconst initialState = {\r\n    todos : []\r\n}\r\n\r\nconst rootReducer = ( state = initialState, action ) => {\r\n    switch(action.type) {\r\n        case  actionTypes.ADD_TODO:\r\n            return {\r\n                ...state,\r\n                todos : [...state.todos, action.payload]\r\n            }\r\n\r\n        case actionTypes.DELETE_TODO: \r\n            // menghapus dengan method splice\r\n            // copy state todos \r\n            let newTodos = [...state.todos]\r\n            // hapus element array\r\n            newTodos.splice(action.payload.index, 1)\r\n            // return state baru\r\n            return {\r\n                ...state,\r\n                todos: newTodos\r\n            } \r\n\r\n        case actionTypes.EDIT_TODO:\r\n            // edit state\r\n\r\n            // copy state todos \r\n            let todos = [...state.todos]\r\n            // ganti data todo\r\n            let index = action.payload.index\r\n            let todo = action.payload.todo\r\n            todos[index] = todo\r\n\r\n            // return state baru\r\n            return {\r\n                ...state,\r\n                todos\r\n            }\r\n\r\n        default :\r\n            return state\r\n    } \r\n}\r\n\r\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() )\r\n\r\nexport default store","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form/Form'\nimport List from './components/List/List'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      todos: [],\n    }\n  }\n  \n  handleSubmit = (todo) => {\n    this.setState(prevState => (\n      {todos: prevState.todos.concat(todo) }\n    ))\n  }\n\n  render() {\n    return (\n    <Provider store={store}>\n      <div className=\"App container\">\n        <Form />\n        <List />        \n      </div>\n    </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}